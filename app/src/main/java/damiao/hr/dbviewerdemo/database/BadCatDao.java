package damiao.hr.dbviewerdemo.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import damiao.hr.dbviewerdemo.BadCat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BAD_CAT".
*/
public class BadCatDao extends AbstractDao<BadCat, Long> {

    public static final String TABLENAME = "BAD_CAT";

    /**
     * Properties of entity BadCat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BodyHeight = new Property(1, float.class, "bodyHeight", false, "BODY_HEIGHT");
        public final static Property BodyWidth = new Property(2, double.class, "bodyWidth", false, "BODY_WIDTH");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property Weight = new Property(4, int.class, "weight", false, "WEIGHT");
        public final static Property Tone = new Property(5, byte[].class, "tone", false, "TONE");
    }


    public BadCatDao(DaoConfig config) {
        super(config);
    }
    
    public BadCatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BAD_CAT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BODY_HEIGHT\" REAL NOT NULL ," + // 1: bodyHeight
                "\"BODY_WIDTH\" REAL NOT NULL ," + // 2: bodyWidth
                "\"NICK_NAME\" TEXT," + // 3: nickName
                "\"WEIGHT\" INTEGER NOT NULL ," + // 4: weight
                "\"TONE\" BLOB);"); // 5: tone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BAD_CAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BadCat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getBodyHeight());
        stmt.bindDouble(3, entity.getBodyWidth());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
        stmt.bindLong(5, entity.getWeight());
 
        byte[] tone = entity.getTone();
        if (tone != null) {
            stmt.bindBlob(6, tone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BadCat entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getBodyHeight());
        stmt.bindDouble(3, entity.getBodyWidth());
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(4, nickName);
        }
        stmt.bindLong(5, entity.getWeight());
 
        byte[] tone = entity.getTone();
        if (tone != null) {
            stmt.bindBlob(6, tone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BadCat readEntity(Cursor cursor, int offset) {
        BadCat entity = new BadCat( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getFloat(offset + 1), // bodyHeight
            cursor.getDouble(offset + 2), // bodyWidth
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickName
            cursor.getInt(offset + 4), // weight
            cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5) // tone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BadCat entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBodyHeight(cursor.getFloat(offset + 1));
        entity.setBodyWidth(cursor.getDouble(offset + 2));
        entity.setNickName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeight(cursor.getInt(offset + 4));
        entity.setTone(cursor.isNull(offset + 5) ? null : cursor.getBlob(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BadCat entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BadCat entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BadCat entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
